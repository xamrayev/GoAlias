// Fuzzy search —Ñ—É–Ω–∫—Ü–∏—è
function fuzzyMatch(str, pattern) {
  pattern = pattern.toLowerCase();
  str = str.toLowerCase();
  
  let patternIdx = 0;
  let strIdx = 0;
  let score = 0;
  
  while (strIdx < str.length && patternIdx < pattern.length) {
    if (str[strIdx] === pattern[patternIdx]) {
      score += 1;
      patternIdx++;
    }
    strIdx++;
  }
  
  return patternIdx === pattern.length ? score : 0;
}

// Levenshtein distance –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
function levenshteinDistance(a, b) {
  const matrix = [];
  
  for (let i = 0; i <= b.length; i++) {
    matrix[i] = [i];
  }
  
  for (let j = 0; j <= a.length; j++) {
    matrix[0][j] = j;
  }
  
  for (let i = 1; i <= b.length; i++) {
    for (let j = 1; j <= a.length; j++) {
      if (b.charAt(i - 1) === a.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j] + 1
        );
      }
    }
  }
  
  return matrix[b.length][a.length];
}

// AI –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Summarizer API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
async function aiSearch(query, items) {
  try {
    if (!("Summarizer" in self)) {
      return fuzzySearchFallback(query, items);
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    const summarizer = await Summarizer.create({
      type: "key-points",
      format: "plain-text",
      length: "short"
    });
    
    const queryContext = await summarizer.summarize(query);
    summarizer.destroy();
    
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const results = items.map(item => {
      const descScore = fuzzyMatch(item.description || '', queryContext);
      const titleScore = fuzzyMatch(item.alias, query);
      const urlScore = fuzzyMatch(item.url, query);
      
      return {
        ...item,
        score: descScore * 3 + titleScore * 2 + urlScore
      };
    }).filter(item => item.score > 0)
      .sort((a, b) => b.score - a.score);
    
    return results;
    
  } catch (error) {
    console.error('AI search failed, using fallback:', error);
    return fuzzySearchFallback(query, items);
  }
}

// Fallback –ø–æ–∏—Å–∫ –±–µ–∑ AI
function fuzzySearchFallback(query, items) {
  return items.map(item => {
    const aliasScore = fuzzyMatch(item.alias, query);
    const descScore = fuzzyMatch(item.description || '', query);
    const urlScore = fuzzyMatch(item.url, query);
    const distanceScore = 10 - levenshteinDistance(query, item.alias);
    
    return {
      ...item,
      score: aliasScore * 2 + descScore * 3 + urlScore + Math.max(0, distanceScore)
    };
  }).filter(item => item.score > 0)
    .sort((a, b) => b.score - a.score);
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function getUsageStats() {
  const stats = await chrome.storage.local.get('_stats');
  return stats._stats || {};
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async function updateUsageStats(alias) {
  const stats = await getUsageStats();
  
  if (!stats[alias]) {
    stats[alias] = {
      visitCount: 0,
      lastVisited: null,
      firstVisited: Date.now()
    };
  }
  
  stats[alias].visitCount++;
  stats[alias].lastVisited = Date.now();
  
  await chrome.storage.local.set({ '_stats': stats });
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async function getDefaultSuggestions() {
  const data = await chrome.storage.local.get(null);
  const stats = await getUsageStats();
  
  // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏
  delete data._stats;
  delete data._metadata;
  
  const items = Object.entries(data).map(([alias, urlOrData]) => {
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–ø—Ä–æ—Å—Ç–æ URL) –∏ –Ω–æ–≤–æ–≥–æ (–æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏)
    const url = typeof urlOrData === 'string' ? urlOrData : urlOrData.url;
    const description = typeof urlOrData === 'object' ? urlOrData.description : '';
    
    const stat = stats[alias] || { visitCount: 0, lastVisited: null, firstVisited: Date.now() };
    
    return {
      alias,
      url,
      description,
      visitCount: stat.visitCount,
      lastVisited: stat.lastVisited,
      firstVisited: stat.firstVisited
    };
  });
  
  if (items.length === 0) return [];
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º: 1 –Ω–µ–¥–∞–≤–Ω–∏–π, 3 —á–∞—Å—Ç–æ –ø–æ—Å–µ—â–∞–µ–º—ã—Ö, 1 –Ω–µ–æ—Ç–∫—Ä—ã—Ç—ã–π
  const recent = items
    .filter(i => i.lastVisited)
    .sort((a, b) => b.lastVisited - a.lastVisited)
    .slice(0, 1);
  
  const frequent = items
    .filter(i => i.visitCount > 0)
    .sort((a, b) => b.visitCount - a.visitCount)
    .slice(0, 3);
  
  const unvisited = items
    .filter(i => i.visitCount === 0)
    .sort((a, b) => b.firstVisited - a.firstVisited)
    .slice(0, 1);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const suggestions = [];
  const added = new Set();
  
  [...recent, ...frequent, ...unvisited].forEach(item => {
    if (!added.has(item.alias)) {
      suggestions.push(item);
      added.add(item.alias);
    }
  });
  
  return suggestions.slice(0, 5);
}

// Omnibox input changed handler
chrome.omnibox.onInputChanged.addListener(async (text, suggest) => {
  const query = text.trim();
  
  // –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (!query) {
    const defaults = await getDefaultSuggestions();
    const suggestions = defaults.map(item => ({
      content: item.alias,
      description: `${item.alias} - ${item.description || item.url} ${item.visitCount > 0 ? '(üëÅÔ∏è ' + item.visitCount + ')' : '(üÜï new)'}`
    }));
    
    suggest(suggestions);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  const data = await chrome.storage.local.get(null);
  delete data._stats;
  delete data._metadata;
  
  const items = Object.entries(data).map(([alias, urlOrData]) => {
    const url = typeof urlOrData === 'string' ? urlOrData : urlOrData.url;
    const description = typeof urlOrData === 'object' ? urlOrData.description : '';
    
    return { alias, url, description };
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è AI –ø–æ–∏—Å–∫–∞
  if (query.startsWith('ai ')) {
    const searchQuery = query.substring(3).trim();
    if (searchQuery) {
      const results = await aiSearch(searchQuery, items);
      const suggestions = results.slice(0, 5).map(item => ({
        content: item.alias,
        description: `ü§ñ ${item.alias} - ${item.description || item.url}`
      }));
      
      suggest(suggestions);
      return;
    }
  }
  
  // –û–±—ã—á–Ω—ã–π fuzzy –ø–æ–∏—Å–∫
  const results = fuzzySearchFallback(query, items);
  const suggestions = results.slice(0, 5).map(item => ({
    content: item.alias,
    description: `${item.alias} - ${item.description || item.url}`
  }));
  
  suggest(suggestions);
});

// Omnibox input entered handler
chrome.omnibox.onInputEntered.addListener(async (text) => {
  const alias = text.trim();
  
  const data = await chrome.storage.local.get(alias);
  
  if (data[alias]) {
    const urlOrData = data[alias];
    const url = typeof urlOrData === 'string' ? urlOrData : urlOrData.url;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await updateUsageStats(alias);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º URL
    chrome.tabs.update({ url });
  } else {
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø–æ–∏—Å–∫ –≤ Google
    chrome.tabs.update({ 
      url: "https://www.google.com/search?q=" + encodeURIComponent(text) 
    });
  }
});

// Default suggestion
chrome.omnibox.setDefaultSuggestion({
  description: '–ü–æ–∏—Å–∫ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö (–∏—Å–ø–æ–ª—å–∑—É–π "ai [–∑–∞–ø—Ä–æ—Å]" –¥–ª—è AI –ø–æ–∏—Å–∫–∞) –∏–ª–∏ –≤–≤–µ–¥–∏ alias'
});