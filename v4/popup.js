// popup.js

document.addEventListener('DOMContentLoaded', async () => {
    const popupTitle = document.getElementById('popupTitle');
    const urlInput = document.getElementById('url');
    const aliasInput = document.getElementById('alias');
    const descriptionInput = document.getElementById('description');
    const keywordsInput = document.getElementById('keywords');
    const saveButton = document.getElementById('saveButton');
    const updateButton = document.getElementById('updateButton');
    const deleteButton = document.getElementById('deleteButton');
    const manageButton = document.getElementById('manageButton');
    const generateAiButton = document.getElementById('generateAiButton');
    const aiLoadingIndicator = document.getElementById('aiLoadingIndicator'); // –ù–û–í–´–ô –≠–õ–ï–ú–ï–ù–¢
    const statusMessage = document.getElementById('statusMessage');
    const aliasError = document.getElementById('alias-error');

    let currentTab;
    let existingAliasKey = null;
    let existingAliasData = null;

    const updateUIForExistingAlias = (aliasKey, aliasData) => {
        popupTitle.textContent = `üåê GoAlias - –ò–∑–º–µ–Ω–∏—Ç—å –∞–ª–∏–∞—Å "${aliasKey}"`;
        aliasInput.value = aliasKey;
        descriptionInput.value = aliasData.description || '';
        keywordsInput.value = aliasData.keywords.join(', ') || '';

        saveButton.style.display = 'none';
        updateButton.style.display = 'inline-block';
        deleteButton.style.display = 'inline-block';
        
        statusMessage.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ "${aliasKey}". –í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.`;
        statusMessage.className = 'sketchy-status-message sketchy-status-info';
    };

    const updateUIForNewAlias = () => {
        popupTitle.textContent = 'üåê GoAlias - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É';
        aliasInput.value = '';
        descriptionInput.value = currentTab.title || '';
        keywordsInput.value = '';

        saveButton.style.display = 'inline-block';
        updateButton.style.display = 'none';
        deleteButton.style.display = 'none';

        statusMessage.textContent = '–í–≤–µ–¥–∏—Ç–µ –∞–ª–∏–∞—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI".';
        statusMessage.className = 'sketchy-status-message sketchy-status-info';
    };

    try {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        currentTab = tab;
        urlInput.value = tab.url;

        const aliases = await chrome.runtime.sendMessage({ action: 'getAliases' });
        for (const alias in aliases) {
            if (aliases[alias].url === tab.url) {
                existingAliasKey = alias;
                existingAliasData = aliases[alias];
                break;
            }
        }

        if (existingAliasKey) {
            updateUIForExistingAlias(existingAliasKey, existingAliasData);
        } else {
            updateUIForNewAlias();
        }
        
    } catch (error) {
        console.error('Error fetching tab info or aliases:', error);
        statusMessage.textContent = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}.`;
        statusMessage.className = 'sketchy-status-message sketchy-status-error';
        descriptionInput.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.';
        urlInput.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL.';
    }

    generateAiButton.addEventListener('click', async () => {
        if (!currentTab) {
            statusMessage.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É.';
            statusMessage.className = 'sketchy-status-message sketchy-status-error';
            return;
        }

        statusMessage.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–∏–∞—Å–∞ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é AI...';
        statusMessage.className = 'sketchy-status-message sketchy-status-info';
        generateAiButton.disabled = true;
        aiLoadingIndicator.style.display = 'inline-block'; // –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é

        try {
            const response = await chrome.runtime.sendMessage({
                action: 'generateContentForPopup',
                tabId: currentTab.id,
                url: currentTab.url,
                title: currentTab.title
            });

            if (response && response.success) {
                keywordsInput.value = response.keywords.join(', ');
                aliasInput.value = response.suggestedAlias;
                
                statusMessage.textContent = '–ê–ª–∏–∞—Å –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã AI!';
                statusMessage.className = 'sketchy-status-message sketchy-status-success';
            } else {
                console.error('Failed to generate AI content:', response.error);
                keywordsInput.value = '';
                aliasInput.value = '';
                statusMessage.textContent = `–û—à–∏–±–∫–∞ AI: ${response?.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –í–≤–µ–¥–∏—Ç–µ –∞–ª–∏–∞—Å –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤—Ä—É—á–Ω—É—é.`;
                statusMessage.className = 'sketchy-status-message sketchy-status-error';
            }
        } catch (error) {
            console.error('Error during AI generation:', error);
            statusMessage.textContent = `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ AI: ${error.message}.`;
            statusMessage.className = 'sketchy-status-message sketchy-status-error';
        } finally {
            generateAiButton.disabled = false;
            aiLoadingIndicator.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
        }
    });


    // --- Generic validation function ---
    const validateInputs = async (alias) => {
        aliasError.textContent = '';
        if (!alias) {
            aliasError.textContent = '–ê–ª–∏–∞—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.';
            return false;
        }
        if (!/^[a-zA-Z0-9_-]+$/.test(alias)) {
            aliasError.textContent = '–ê–ª–∏–∞—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.';
            return false;
        }
        if (!urlInput.value.trim()) {
            statusMessage.textContent = 'URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.';
            statusMessage.className = 'sketchy-status-message sketchy-status-error';
            return false;
        }

        const aliases = await chrome.runtime.sendMessage({ action: 'getAliases' });
        if (aliases[alias] && alias !== existingAliasKey) { 
            aliasError.textContent = `–ê–ª–∏–∞—Å "${alias}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.`;
            return false;
        }
        return true;
    };


    // --- Save Button Logic ---
    saveButton.addEventListener('click', async () => {
        const alias = aliasInput.value.trim();
        if (!(await validateInputs(alias))) return;

        const data = {
            url: urlInput.value.trim(),
            description: descriptionInput.value.trim(),
            keywords: keywordsInput.value.split(',').map(k => k.trim()).filter(k => k),
            tags: [], 
            created: new Date().toISOString(),
            usageCount: 0,
            lastUsed: null
        };

        try {
            const response = await chrome.runtime.sendMessage({ action: 'saveAlias', alias, data });
            if (response.success) {
                statusMessage.textContent = `–ê–ª–∏–∞—Å "${alias}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`;
                statusMessage.className = 'sketchy-status-message sketchy-status-success';
                setTimeout(() => window.close(), 1500);
            } else {
                statusMessage.textContent = `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${response.error}`;
                statusMessage.className = 'sketchy-status-message sketchy-status-error';
            }
        } catch (error) {
            console.error('Error saving alias:', error);
            statusMessage.textContent = `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
            statusMessage.className = 'sketchy-status-message sketchy-status-error';
        }
    });

    // --- Update Button Logic ---
    updateButton.addEventListener('click', async () => {
        const alias = aliasInput.value.trim();
        if (!(await validateInputs(alias))) return;

        if (alias !== existingAliasKey) {
            await chrome.runtime.sendMessage({ action: 'deleteAlias', alias: existingAliasKey });
            existingAliasKey = null; 
        }

        const data = {
            url: urlInput.value.trim(),
            description: descriptionInput.value.trim(),
            keywords: keywordsInput.value.split(',').map(k => k.trim()).filter(k => k),
            tags: existingAliasData ? existingAliasData.tags : [],
            created: existingAliasData ? existingAliasData.created : new Date().toISOString(),
            usageCount: existingAliasData ? existingAliasData.usageCount : 0,
            lastUsed: new Date().toISOString()
        };

        try {
            const action = (alias === existingAliasKey) ? 'updateAlias' : 'saveAlias'; 
            const response = await chrome.runtime.sendMessage({ action: action, alias: alias, data: data });

            if (response.success) {
                statusMessage.textContent = `–ê–ª–∏–∞—Å "${alias}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`;
                statusMessage.className = 'sketchy-status-message sketchy-status-success';
                existingAliasKey = alias;
                existingAliasData = data;
                updateUIForExistingAlias(existingAliasKey, existingAliasData);
            } else {
                statusMessage.textContent = `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.error}`;
                statusMessage.className = 'sketchy-status-message sketchy-status-error';
            }
        } catch (error) {
            console.error('Error updating alias:', error);
            statusMessage.textContent = `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
            statusMessage.className = 'sketchy-status-message sketchy-status-error';
        }
    });

    // --- Delete Button Logic ---
    deleteButton.addEventListener('click', async () => {
        if (!existingAliasKey) {
            statusMessage.textContent = '–ù–µ—Ç –∞–ª–∏–∞—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.';
            statusMessage.className = 'sketchy-status-message sketchy-status-error';
            return;
        }

        try {
            const response = await chrome.runtime.sendMessage({ action: 'deleteAlias', alias: existingAliasKey });
            if (response.success) {
                statusMessage.textContent = `–ê–ª–∏–∞—Å "${existingAliasKey}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`;
                statusMessage.className = 'sketchy-status-message sketchy-status-success';
                existingAliasKey = null;
                existingAliasData = null;
                updateUIForNewAlias();
            } else {
                statusMessage.textContent = `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${response.error}`;
                statusMessage.className = 'sketchy-status-message sketchy-status-error';
            }
        } catch (error) {
            console.error('Error deleting alias:', error);
            statusMessage.textContent = `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
            statusMessage.className = 'sketchy-status-message sketchy-status-error';
        }
    });

    // --- Manage Aliases Button Logic ---
    manageButton.addEventListener('click', async () => {
        await chrome.runtime.sendMessage({ action: 'openOptionsPage' });
    });
});